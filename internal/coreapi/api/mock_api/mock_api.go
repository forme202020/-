// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	ecdsa "crypto/ecdsa"
	reflect "reflect"

	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
	types "github.com/meshplus/bitxhub-kit/types"
	pb "github.com/meshplus/bitxhub-model/pb"
	api "github.com/meshplus/bitxhub/internal/coreapi/api"
	events "github.com/meshplus/bitxhub/internal/model/events"
	repo "github.com/meshplus/bitxhub/internal/repo"
	peermgr "github.com/meshplus/bitxhub/pkg/peermgr"
	ledger "github.com/meshplus/eth-kit/ledger"
)

// MockCoreAPI is a mock of CoreAPI interface.
type MockCoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCoreAPIMockRecorder
}

// MockCoreAPIMockRecorder is the mock recorder for MockCoreAPI.
type MockCoreAPIMockRecorder struct {
	mock *MockCoreAPI
}

// NewMockCoreAPI creates a new mock instance.
func NewMockCoreAPI(ctrl *gomock.Controller) *MockCoreAPI {
	mock := &MockCoreAPI{ctrl: ctrl}
	mock.recorder = &MockCoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreAPI) EXPECT() *MockCoreAPIMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockCoreAPI) Account() api.AccountAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(api.AccountAPI)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockCoreAPIMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockCoreAPI)(nil).Account))
}

// Audit mocks base method.
func (m *MockCoreAPI) Audit() api.AuditAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Audit")
	ret0, _ := ret[0].(api.AuditAPI)
	return ret0
}

// Audit indicates an expected call of Audit.
func (mr *MockCoreAPIMockRecorder) Audit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Audit", reflect.TypeOf((*MockCoreAPI)(nil).Audit))
}

// Broker mocks base method.
func (m *MockCoreAPI) Broker() api.BrokerAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broker")
	ret0, _ := ret[0].(api.BrokerAPI)
	return ret0
}

// Broker indicates an expected call of Broker.
func (mr *MockCoreAPIMockRecorder) Broker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broker", reflect.TypeOf((*MockCoreAPI)(nil).Broker))
}

// Chain mocks base method.
func (m *MockCoreAPI) Chain() api.ChainAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(api.ChainAPI)
	return ret0
}

// Chain indicates an expected call of Chain.
func (mr *MockCoreAPIMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockCoreAPI)(nil).Chain))
}

// Feed mocks base method.
func (m *MockCoreAPI) Feed() api.FeedAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed")
	ret0, _ := ret[0].(api.FeedAPI)
	return ret0
}

// Feed indicates an expected call of Feed.
func (mr *MockCoreAPIMockRecorder) Feed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockCoreAPI)(nil).Feed))
}

// Network mocks base method.
func (m *MockCoreAPI) Network() api.NetworkAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(api.NetworkAPI)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockCoreAPIMockRecorder) Network() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockCoreAPI)(nil).Network))
}

// MockBrokerAPI is a mock of BrokerAPI interface.
type MockBrokerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerAPIMockRecorder
}

// MockBrokerAPIMockRecorder is the mock recorder for MockBrokerAPI.
type MockBrokerAPIMockRecorder struct {
	mock *MockBrokerAPI
}

// NewMockBrokerAPI creates a new mock instance.
func NewMockBrokerAPI(ctrl *gomock.Controller) *MockBrokerAPI {
	mock := &MockBrokerAPI{ctrl: ctrl}
	mock.recorder = &MockBrokerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerAPI) EXPECT() *MockBrokerAPIMockRecorder {
	return m.recorder
}

// AddPier mocks base method.
func (m *MockBrokerAPI) AddPier(pierID string) (chan *pb.InterchainTxWrappers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPier", pierID)
	ret0, _ := ret[0].(chan *pb.InterchainTxWrappers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPier indicates an expected call of AddPier.
func (mr *MockBrokerAPIMockRecorder) AddPier(pierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPier", reflect.TypeOf((*MockBrokerAPI)(nil).AddPier), pierID)
}

// FetchSignsFromOtherPeers mocks base method.
func (m *MockBrokerAPI) FetchSignsFromOtherPeers(req *pb.GetSignsRequest) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSignsFromOtherPeers", req)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// FetchSignsFromOtherPeers indicates an expected call of FetchSignsFromOtherPeers.
func (mr *MockBrokerAPIMockRecorder) FetchSignsFromOtherPeers(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSignsFromOtherPeers", reflect.TypeOf((*MockBrokerAPI)(nil).FetchSignsFromOtherPeers), req)
}

// FetchTssInfoFromOtherPeers mocks base method.
func (m *MockBrokerAPI) FetchTssInfoFromOtherPeers() []*pb.TssInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTssInfoFromOtherPeers")
	ret0, _ := ret[0].([]*pb.TssInfo)
	return ret0
}

// FetchTssInfoFromOtherPeers indicates an expected call of FetchTssInfoFromOtherPeers.
func (mr *MockBrokerAPIMockRecorder) FetchTssInfoFromOtherPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTssInfoFromOtherPeers", reflect.TypeOf((*MockBrokerAPI)(nil).FetchTssInfoFromOtherPeers))
}

// GetBlock mocks base method.
func (m *MockBrokerAPI) GetBlock(mode, key string, fullTx bool) (*pb.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", mode, key, fullTx)
	ret0, _ := ret[0].(*pb.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBrokerAPIMockRecorder) GetBlock(mode, key, fullTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlock), mode, key, fullTx)
}

// GetBlockHeader mocks base method.
func (m *MockBrokerAPI) GetBlockHeader(begin, end uint64, ch chan<- *pb.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeader", begin, end, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBlockHeader indicates an expected call of GetBlockHeader.
func (mr *MockBrokerAPIMockRecorder) GetBlockHeader(begin, end, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeader", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockHeader), begin, end, ch)
}

// GetBlockHeaders mocks base method.
func (m *MockBrokerAPI) GetBlockHeaders(start, end uint64) ([]*pb.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaders", start, end)
	ret0, _ := ret[0].([]*pb.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaders indicates an expected call of GetBlockHeaders.
func (mr *MockBrokerAPIMockRecorder) GetBlockHeaders(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaders", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockHeaders), start, end)
}

// GetBlocks mocks base method.
func (m *MockBrokerAPI) GetBlocks(start, end uint64, fullTx bool) ([]*pb.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", start, end, fullTx)
	ret0, _ := ret[0].([]*pb.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBrokerAPIMockRecorder) GetBlocks(start, end, fullTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlocks), start, end, fullTx)
}

// GetInterchainTxWrappers mocks base method.
func (m *MockBrokerAPI) GetInterchainTxWrappers(did string, begin, end uint64, ch chan<- *pb.InterchainTxWrappers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterchainTxWrappers", did, begin, end, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInterchainTxWrappers indicates an expected call of GetInterchainTxWrappers.
func (mr *MockBrokerAPIMockRecorder) GetInterchainTxWrappers(did, begin, end, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterchainTxWrappers", reflect.TypeOf((*MockBrokerAPI)(nil).GetInterchainTxWrappers), did, begin, end, ch)
}

// GetPendingNonceByAccount mocks base method.
func (m *MockBrokerAPI) GetPendingNonceByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNonceByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingNonceByAccount indicates an expected call of GetPendingNonceByAccount.
func (mr *MockBrokerAPIMockRecorder) GetPendingNonceByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNonceByAccount", reflect.TypeOf((*MockBrokerAPI)(nil).GetPendingNonceByAccount), account)
}

// GetPendingTransactions mocks base method.
func (m *MockBrokerAPI) GetPendingTransactions(max int) []pb.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTransactions", max)
	ret0, _ := ret[0].([]pb.Transaction)
	return ret0
}

// GetPendingTransactions indicates an expected call of GetPendingTransactions.
func (mr *MockBrokerAPIMockRecorder) GetPendingTransactions(max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTransactions", reflect.TypeOf((*MockBrokerAPI)(nil).GetPendingTransactions), max)
}

// GetPoolTransaction mocks base method.
func (m *MockBrokerAPI) GetPoolTransaction(hash *types.Hash) pb.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolTransaction", hash)
	ret0, _ := ret[0].(pb.Transaction)
	return ret0
}

// GetPoolTransaction indicates an expected call of GetPoolTransaction.
func (mr *MockBrokerAPIMockRecorder) GetPoolTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).GetPoolTransaction), hash)
}

// GetPrivKey mocks base method.
func (m *MockBrokerAPI) GetPrivKey() *repo.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivKey")
	ret0, _ := ret[0].(*repo.Key)
	return ret0
}

// GetPrivKey indicates an expected call of GetPrivKey.
func (mr *MockBrokerAPIMockRecorder) GetPrivKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivKey", reflect.TypeOf((*MockBrokerAPI)(nil).GetPrivKey))
}

// GetQuorum mocks base method.
func (m *MockBrokerAPI) GetQuorum() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuorum")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetQuorum indicates an expected call of GetQuorum.
func (mr *MockBrokerAPIMockRecorder) GetQuorum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuorum", reflect.TypeOf((*MockBrokerAPI)(nil).GetQuorum))
}

// GetReceipt mocks base method.
func (m *MockBrokerAPI) GetReceipt(arg0 *types.Hash) (*pb.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", arg0)
	ret0, _ := ret[0].(*pb.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockBrokerAPIMockRecorder) GetReceipt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockBrokerAPI)(nil).GetReceipt), arg0)
}

// GetSign mocks base method.
func (m *MockBrokerAPI) GetSign(req *pb.GetSignsRequest, signers []string) (string, []byte, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSign", req, signers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetSign indicates an expected call of GetSign.
func (mr *MockBrokerAPIMockRecorder) GetSign(req, signers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSign", reflect.TypeOf((*MockBrokerAPI)(nil).GetSign), req, signers)
}

// GetStateLedger mocks base method.
func (m *MockBrokerAPI) GetStateLedger() ledger.StateLedger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateLedger")
	ret0, _ := ret[0].(ledger.StateLedger)
	return ret0
}

// GetStateLedger indicates an expected call of GetStateLedger.
func (mr *MockBrokerAPIMockRecorder) GetStateLedger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateLedger", reflect.TypeOf((*MockBrokerAPI)(nil).GetStateLedger))
}

// GetTransaction mocks base method.
func (m *MockBrokerAPI) GetTransaction(arg0 *types.Hash) (pb.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(pb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBrokerAPIMockRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).GetTransaction), arg0)
}

// GetTransactionMeta mocks base method.
func (m *MockBrokerAPI) GetTransactionMeta(arg0 *types.Hash) (*pb.TransactionMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionMeta", arg0)
	ret0, _ := ret[0].(*pb.TransactionMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionMeta indicates an expected call of GetTransactionMeta.
func (mr *MockBrokerAPIMockRecorder) GetTransactionMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionMeta", reflect.TypeOf((*MockBrokerAPI)(nil).GetTransactionMeta), arg0)
}

// GetTssInfo mocks base method.
func (m *MockBrokerAPI) GetTssInfo() (*pb.TssInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTssInfo")
	ret0, _ := ret[0].(*pb.TssInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTssInfo indicates an expected call of GetTssInfo.
func (mr *MockBrokerAPIMockRecorder) GetTssInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTssInfo", reflect.TypeOf((*MockBrokerAPI)(nil).GetTssInfo))
}

// GetTssPubkey mocks base method.
func (m *MockBrokerAPI) GetTssPubkey() (string, *ecdsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTssPubkey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*ecdsa.PublicKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTssPubkey indicates an expected call of GetTssPubkey.
func (mr *MockBrokerAPIMockRecorder) GetTssPubkey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTssPubkey", reflect.TypeOf((*MockBrokerAPI)(nil).GetTssPubkey))
}

// HandleTransaction mocks base method.
func (m *MockBrokerAPI) HandleTransaction(tx pb.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockBrokerAPIMockRecorder) HandleTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).HandleTransaction), tx)
}

// HandleView mocks base method.
func (m *MockBrokerAPI) HandleView(tx pb.Transaction) (*pb.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleView", tx)
	ret0, _ := ret[0].(*pb.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleView indicates an expected call of HandleView.
func (mr *MockBrokerAPIMockRecorder) HandleView(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleView", reflect.TypeOf((*MockBrokerAPI)(nil).HandleView), tx)
}

// OrderReady mocks base method.
func (m *MockBrokerAPI) OrderReady() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReady")
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderReady indicates an expected call of OrderReady.
func (mr *MockBrokerAPIMockRecorder) OrderReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReady", reflect.TypeOf((*MockBrokerAPI)(nil).OrderReady))
}

// RemovePier mocks base method.
func (m *MockBrokerAPI) RemovePier(pierID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePier", pierID)
}

// RemovePier indicates an expected call of RemovePier.
func (mr *MockBrokerAPIMockRecorder) RemovePier(pierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePier", reflect.TypeOf((*MockBrokerAPI)(nil).RemovePier), pierID)
}

// MockNetworkAPI is a mock of NetworkAPI interface.
type MockNetworkAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkAPIMockRecorder
}

// MockNetworkAPIMockRecorder is the mock recorder for MockNetworkAPI.
type MockNetworkAPIMockRecorder struct {
	mock *MockNetworkAPI
}

// NewMockNetworkAPI creates a new mock instance.
func NewMockNetworkAPI(ctrl *gomock.Controller) *MockNetworkAPI {
	mock := &MockNetworkAPI{ctrl: ctrl}
	mock.recorder = &MockNetworkAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkAPI) EXPECT() *MockNetworkAPIMockRecorder {
	return m.recorder
}

// OtherPeers mocks base method.
func (m *MockNetworkAPI) OtherPeers() map[uint64]*peer.AddrInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtherPeers")
	ret0, _ := ret[0].(map[uint64]*peer.AddrInfo)
	return ret0
}

// OtherPeers indicates an expected call of OtherPeers.
func (mr *MockNetworkAPIMockRecorder) OtherPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtherPeers", reflect.TypeOf((*MockNetworkAPI)(nil).OtherPeers))
}

// PeerInfo mocks base method.
func (m *MockNetworkAPI) PeerInfo() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerInfo")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerInfo indicates an expected call of PeerInfo.
func (mr *MockNetworkAPIMockRecorder) PeerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerInfo", reflect.TypeOf((*MockNetworkAPI)(nil).PeerInfo))
}

// PierManager mocks base method.
func (m *MockNetworkAPI) PierManager() peermgr.PierManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PierManager")
	ret0, _ := ret[0].(peermgr.PierManager)
	return ret0
}

// PierManager indicates an expected call of PierManager.
func (mr *MockNetworkAPIMockRecorder) PierManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PierManager", reflect.TypeOf((*MockNetworkAPI)(nil).PierManager))
}

// MockChainAPI is a mock of ChainAPI interface.
type MockChainAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChainAPIMockRecorder
}

// MockChainAPIMockRecorder is the mock recorder for MockChainAPI.
type MockChainAPIMockRecorder struct {
	mock *MockChainAPI
}

// NewMockChainAPI creates a new mock instance.
func NewMockChainAPI(ctrl *gomock.Controller) *MockChainAPI {
	mock := &MockChainAPI{ctrl: ctrl}
	mock.recorder = &MockChainAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainAPI) EXPECT() *MockChainAPIMockRecorder {
	return m.recorder
}

// Meta mocks base method.
func (m *MockChainAPI) Meta() (*pb.ChainMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*pb.ChainMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Meta indicates an expected call of Meta.
func (mr *MockChainAPIMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockChainAPI)(nil).Meta))
}

// Status mocks base method.
func (m *MockChainAPI) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockChainAPIMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockChainAPI)(nil).Status))
}

// TPS mocks base method.
func (m *MockChainAPI) TPS(begin, end uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TPS", begin, end)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TPS indicates an expected call of TPS.
func (mr *MockChainAPIMockRecorder) TPS(begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TPS", reflect.TypeOf((*MockChainAPI)(nil).TPS), begin, end)
}

// MockFeedAPI is a mock of FeedAPI interface.
type MockFeedAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFeedAPIMockRecorder
}

// MockFeedAPIMockRecorder is the mock recorder for MockFeedAPI.
type MockFeedAPIMockRecorder struct {
	mock *MockFeedAPI
}

// NewMockFeedAPI creates a new mock instance.
func NewMockFeedAPI(ctrl *gomock.Controller) *MockFeedAPI {
	mock := &MockFeedAPI{ctrl: ctrl}
	mock.recorder = &MockFeedAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedAPI) EXPECT() *MockFeedAPIMockRecorder {
	return m.recorder
}

// BloomStatus mocks base method.
func (m *MockFeedAPI) BloomStatus() (uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BloomStatus")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// BloomStatus indicates an expected call of BloomStatus.
func (mr *MockFeedAPIMockRecorder) BloomStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BloomStatus", reflect.TypeOf((*MockFeedAPI)(nil).BloomStatus))
}

// SubscribeLogsEvent mocks base method.
func (m *MockFeedAPI) SubscribeLogsEvent(arg0 chan<- []*pb.EvmLog) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLogsEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeLogsEvent indicates an expected call of SubscribeLogsEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeLogsEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLogsEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeLogsEvent), arg0)
}

// SubscribeNewBlockEvent mocks base method.
func (m *MockFeedAPI) SubscribeNewBlockEvent(arg0 chan<- events.ExecutedEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewBlockEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewBlockEvent indicates an expected call of SubscribeNewBlockEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeNewBlockEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewBlockEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeNewBlockEvent), arg0)
}

// SubscribeNewTxEvent mocks base method.
func (m *MockFeedAPI) SubscribeNewTxEvent(arg0 chan<- pb.Transactions) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewTxEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewTxEvent indicates an expected call of SubscribeNewTxEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeNewTxEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTxEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeNewTxEvent), arg0)
}

// SubscribeTssCulprits mocks base method.
func (m *MockFeedAPI) SubscribeTssCulprits(ch chan<- *pb.Message) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTssCulprits", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeTssCulprits indicates an expected call of SubscribeTssCulprits.
func (mr *MockFeedAPIMockRecorder) SubscribeTssCulprits(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTssCulprits", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeTssCulprits), ch)
}

// SubscribeTssSignRes mocks base method.
func (m *MockFeedAPI) SubscribeTssSignRes(ch chan<- *pb.Message) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTssSignRes", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeTssSignRes indicates an expected call of SubscribeTssSignRes.
func (mr *MockFeedAPIMockRecorder) SubscribeTssSignRes(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTssSignRes", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeTssSignRes), ch)
}

// MockAccountAPI is a mock of AccountAPI interface.
type MockAccountAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAPIMockRecorder
}

// MockAccountAPIMockRecorder is the mock recorder for MockAccountAPI.
type MockAccountAPIMockRecorder struct {
	mock *MockAccountAPI
}

// NewMockAccountAPI creates a new mock instance.
func NewMockAccountAPI(ctrl *gomock.Controller) *MockAccountAPI {
	mock := &MockAccountAPI{ctrl: ctrl}
	mock.recorder = &MockAccountAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountAPI) EXPECT() *MockAccountAPIMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountAPI) GetAccount(addr *types.Address) ledger.IAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", addr)
	ret0, _ := ret[0].(ledger.IAccount)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountAPIMockRecorder) GetAccount(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountAPI)(nil).GetAccount), addr)
}

// MockAuditAPI is a mock of AuditAPI interface.
type MockAuditAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAuditAPIMockRecorder
}

// MockAuditAPIMockRecorder is the mock recorder for MockAuditAPI.
type MockAuditAPIMockRecorder struct {
	mock *MockAuditAPI
}

// NewMockAuditAPI creates a new mock instance.
func NewMockAuditAPI(ctrl *gomock.Controller) *MockAuditAPI {
	mock := &MockAuditAPI{ctrl: ctrl}
	mock.recorder = &MockAuditAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditAPI) EXPECT() *MockAuditAPIMockRecorder {
	return m.recorder
}

// HandleAuditNodeSubscription mocks base method.
func (m *MockAuditAPI) HandleAuditNodeSubscription(dataCh chan<- *pb.AuditTxInfo, auditNodeID string, blockStart uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuditNodeSubscription", dataCh, auditNodeID, blockStart)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAuditNodeSubscription indicates an expected call of HandleAuditNodeSubscription.
func (mr *MockAuditAPIMockRecorder) HandleAuditNodeSubscription(dataCh, auditNodeID, blockStart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuditNodeSubscription", reflect.TypeOf((*MockAuditAPI)(nil).HandleAuditNodeSubscription), dataCh, auditNodeID, blockStart)
}

// SubscribeAuditEvent mocks base method.
func (m *MockAuditAPI) SubscribeAuditEvent(arg0 chan<- *pb.AuditTxInfo) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeAuditEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeAuditEvent indicates an expected call of SubscribeAuditEvent.
func (mr *MockAuditAPIMockRecorder) SubscribeAuditEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeAuditEvent", reflect.TypeOf((*MockAuditAPI)(nil).SubscribeAuditEvent), arg0)
}
