// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_ledger is a generated GoMock package.
package mock_ledger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/meshplus/bitxhub-kit/types"
	pb "github.com/meshplus/bitxhub-model/pb"
	ledger "github.com/meshplus/bitxhub/internal/ledger"
)

// MockLedger is a mock of Ledger interface.
type MockLedger struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerMockRecorder
}

// MockLedgerMockRecorder is the mock recorder for MockLedger.
type MockLedgerMockRecorder struct {
	mock *MockLedger
}

// NewMockLedger creates a new mock instance.
func NewMockLedger(ctrl *gomock.Controller) *MockLedger {
	mock := &MockLedger{ctrl: ctrl}
	mock.recorder = &MockLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedger) EXPECT() *MockLedgerMockRecorder {
	return m.recorder
}

// AccountCache mocks base method.
func (m *MockLedger) AccountCache() *ledger.AccountCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCache")
	ret0, _ := ret[0].(*ledger.AccountCache)
	return ret0
}

// AccountCache indicates an expected call of AccountCache.
func (mr *MockLedgerMockRecorder) AccountCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCache", reflect.TypeOf((*MockLedger)(nil).AccountCache))
}

// AddEvent mocks base method.
func (m *MockLedger) AddEvent(arg0 *pb.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", arg0)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockLedgerMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockLedger)(nil).AddEvent), arg0)
}

// AddState mocks base method.
func (m *MockLedger) AddState(arg0 *types.Address, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddState", arg0, arg1, arg2)
}

// AddState indicates an expected call of AddState.
func (mr *MockLedgerMockRecorder) AddState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddState", reflect.TypeOf((*MockLedger)(nil).AddState), arg0, arg1, arg2)
}

// Clear mocks base method.
func (m *MockLedger) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockLedgerMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockLedger)(nil).Clear))
}

// Close mocks base method.
func (m *MockLedger) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockLedgerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLedger)(nil).Close))
}

// Commit mocks base method.
func (m *MockLedger) Commit(height uint64, accounts map[string]*ledger.Account, blockJournal *ledger.BlockJournal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height, accounts, blockJournal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockLedgerMockRecorder) Commit(height, accounts, blockJournal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockLedger)(nil).Commit), height, accounts, blockJournal)
}

// Events mocks base method.
func (m *MockLedger) Events(txHash string) []*pb.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", txHash)
	ret0, _ := ret[0].([]*pb.Event)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockLedgerMockRecorder) Events(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockLedger)(nil).Events), txHash)
}

// FlushDirtyDataAndComputeJournal mocks base method.
func (m *MockLedger) FlushDirtyDataAndComputeJournal() (map[string]*ledger.Account, *ledger.BlockJournal) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDirtyDataAndComputeJournal")
	ret0, _ := ret[0].(map[string]*ledger.Account)
	ret1, _ := ret[1].(*ledger.BlockJournal)
	return ret0, ret1
}

// FlushDirtyDataAndComputeJournal indicates an expected call of FlushDirtyDataAndComputeJournal.
func (mr *MockLedgerMockRecorder) FlushDirtyDataAndComputeJournal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDirtyDataAndComputeJournal", reflect.TypeOf((*MockLedger)(nil).FlushDirtyDataAndComputeJournal))
}

// GetAccount mocks base method.
func (m *MockLedger) GetAccount(arg0 *types.Address) *ledger.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*ledger.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockLedgerMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockLedger)(nil).GetAccount), arg0)
}

// GetBalance mocks base method.
func (m *MockLedger) GetBalance(arg0 *types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockLedgerMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockLedger)(nil).GetBalance), arg0)
}

// GetBlock mocks base method.
func (m *MockLedger) GetBlock(height uint64) (*pb.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", height)
	ret0, _ := ret[0].(*pb.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockLedgerMockRecorder) GetBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockLedger)(nil).GetBlock), height)
}

// GetBlockByHash mocks base method.
func (m *MockLedger) GetBlockByHash(hash *types.Hash) (*pb.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*pb.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockLedgerMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockLedger)(nil).GetBlockByHash), hash)
}

// GetBlockSign mocks base method.
func (m *MockLedger) GetBlockSign(height uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSign", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSign indicates an expected call of GetBlockSign.
func (mr *MockLedgerMockRecorder) GetBlockSign(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSign", reflect.TypeOf((*MockLedger)(nil).GetBlockSign), height)
}

// GetChainMeta mocks base method.
func (m *MockLedger) GetChainMeta() *pb.ChainMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainMeta")
	ret0, _ := ret[0].(*pb.ChainMeta)
	return ret0
}

// GetChainMeta indicates an expected call of GetChainMeta.
func (mr *MockLedgerMockRecorder) GetChainMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainMeta", reflect.TypeOf((*MockLedger)(nil).GetChainMeta))
}

// GetCode mocks base method.
func (m *MockLedger) GetCode(arg0 *types.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockLedgerMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockLedger)(nil).GetCode), arg0)
}

// GetInterchainMeta mocks base method.
func (m *MockLedger) GetInterchainMeta(height uint64) (*pb.InterchainMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterchainMeta", height)
	ret0, _ := ret[0].(*pb.InterchainMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterchainMeta indicates an expected call of GetInterchainMeta.
func (mr *MockLedgerMockRecorder) GetInterchainMeta(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterchainMeta", reflect.TypeOf((*MockLedger)(nil).GetInterchainMeta), height)
}

// GetNonce mocks base method.
func (m *MockLedger) GetNonce(arg0 *types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockLedgerMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockLedger)(nil).GetNonce), arg0)
}

// GetOrCreateAccount mocks base method.
func (m *MockLedger) GetOrCreateAccount(arg0 *types.Address) *ledger.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", arg0)
	ret0, _ := ret[0].(*ledger.Account)
	return ret0
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount.
func (mr *MockLedgerMockRecorder) GetOrCreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockLedger)(nil).GetOrCreateAccount), arg0)
}

// GetReceipt mocks base method.
func (m *MockLedger) GetReceipt(hash *types.Hash) (*pb.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", hash)
	ret0, _ := ret[0].(*pb.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockLedgerMockRecorder) GetReceipt(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockLedger)(nil).GetReceipt), hash)
}

// GetState mocks base method.
func (m *MockLedger) GetState(arg0 *types.Address, arg1 []byte) (bool, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockLedgerMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockLedger)(nil).GetState), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockLedger) GetTransaction(hash *types.Hash) (*pb.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(*pb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockLedgerMockRecorder) GetTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockLedger)(nil).GetTransaction), hash)
}

// GetTransactionCount mocks base method.
func (m *MockLedger) GetTransactionCount(height uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockLedgerMockRecorder) GetTransactionCount(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockLedger)(nil).GetTransactionCount), height)
}

// GetTransactionMeta mocks base method.
func (m *MockLedger) GetTransactionMeta(hash *types.Hash) (*pb.TransactionMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionMeta", hash)
	ret0, _ := ret[0].(*pb.TransactionMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionMeta indicates an expected call of GetTransactionMeta.
func (mr *MockLedgerMockRecorder) GetTransactionMeta(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionMeta", reflect.TypeOf((*MockLedger)(nil).GetTransactionMeta), hash)
}

// PersistBlockData mocks base method.
func (m *MockLedger) PersistBlockData(blockData *ledger.BlockData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PersistBlockData", blockData)
}

// PersistBlockData indicates an expected call of PersistBlockData.
func (mr *MockLedgerMockRecorder) PersistBlockData(blockData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlockData", reflect.TypeOf((*MockLedger)(nil).PersistBlockData), blockData)
}

// PersistExecutionResult mocks base method.
func (m *MockLedger) PersistExecutionResult(block *pb.Block, receipts []*pb.Receipt, meta *pb.InterchainMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistExecutionResult", block, receipts, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistExecutionResult indicates an expected call of PersistExecutionResult.
func (mr *MockLedgerMockRecorder) PersistExecutionResult(block, receipts, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistExecutionResult", reflect.TypeOf((*MockLedger)(nil).PersistExecutionResult), block, receipts, meta)
}

// PutBlock mocks base method.
func (m *MockLedger) PutBlock(height uint64, block *pb.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlock", height, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlock indicates an expected call of PutBlock.
func (mr *MockLedgerMockRecorder) PutBlock(height, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlock", reflect.TypeOf((*MockLedger)(nil).PutBlock), height, block)
}

// QueryByPrefix mocks base method.
func (m *MockLedger) QueryByPrefix(address *types.Address, prefix string) (bool, [][]byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByPrefix", address, prefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([][]byte)
	return ret0, ret1
}

// QueryByPrefix indicates an expected call of QueryByPrefix.
func (mr *MockLedgerMockRecorder) QueryByPrefix(address, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByPrefix", reflect.TypeOf((*MockLedger)(nil).QueryByPrefix), address, prefix)
}

// RemoveJournalsBeforeBlock mocks base method.
func (m *MockLedger) RemoveJournalsBeforeBlock(height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJournalsBeforeBlock", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJournalsBeforeBlock indicates an expected call of RemoveJournalsBeforeBlock.
func (mr *MockLedgerMockRecorder) RemoveJournalsBeforeBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJournalsBeforeBlock", reflect.TypeOf((*MockLedger)(nil).RemoveJournalsBeforeBlock), height)
}

// Rollback mocks base method.
func (m *MockLedger) Rollback(height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockLedgerMockRecorder) Rollback(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockLedger)(nil).Rollback), height)
}

// SetBalance mocks base method.
func (m *MockLedger) SetBalance(arg0 *types.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockLedgerMockRecorder) SetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockLedger)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockLedger) SetCode(arg0 *types.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockLedgerMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockLedger)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockLedger) SetNonce(arg0 *types.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockLedgerMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockLedger)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockLedger) SetState(arg0 *types.Address, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockLedgerMockRecorder) SetState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockLedger)(nil).SetState), arg0, arg1, arg2)
}

// UpdateChainMeta mocks base method.
func (m *MockLedger) UpdateChainMeta(arg0 *pb.ChainMeta) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateChainMeta", arg0)
}

// UpdateChainMeta indicates an expected call of UpdateChainMeta.
func (mr *MockLedgerMockRecorder) UpdateChainMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainMeta", reflect.TypeOf((*MockLedger)(nil).UpdateChainMeta), arg0)
}

// Version mocks base method.
func (m *MockLedger) Version() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockLedgerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockLedger)(nil).Version))
}

// MockStateAccessor is a mock of StateAccessor interface.
type MockStateAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockStateAccessorMockRecorder
}

// MockStateAccessorMockRecorder is the mock recorder for MockStateAccessor.
type MockStateAccessorMockRecorder struct {
	mock *MockStateAccessor
}

// NewMockStateAccessor creates a new mock instance.
func NewMockStateAccessor(ctrl *gomock.Controller) *MockStateAccessor {
	mock := &MockStateAccessor{ctrl: ctrl}
	mock.recorder = &MockStateAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateAccessor) EXPECT() *MockStateAccessorMockRecorder {
	return m.recorder
}

// AddState mocks base method.
func (m *MockStateAccessor) AddState(arg0 *types.Address, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddState", arg0, arg1, arg2)
}

// AddState indicates an expected call of AddState.
func (mr *MockStateAccessorMockRecorder) AddState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddState", reflect.TypeOf((*MockStateAccessor)(nil).AddState), arg0, arg1, arg2)
}

// Clear mocks base method.
func (m *MockStateAccessor) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockStateAccessorMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockStateAccessor)(nil).Clear))
}

// Commit mocks base method.
func (m *MockStateAccessor) Commit(height uint64, accounts map[string]*ledger.Account, blockJournal *ledger.BlockJournal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height, accounts, blockJournal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStateAccessorMockRecorder) Commit(height, accounts, blockJournal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStateAccessor)(nil).Commit), height, accounts, blockJournal)
}

// FlushDirtyDataAndComputeJournal mocks base method.
func (m *MockStateAccessor) FlushDirtyDataAndComputeJournal() (map[string]*ledger.Account, *ledger.BlockJournal) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDirtyDataAndComputeJournal")
	ret0, _ := ret[0].(map[string]*ledger.Account)
	ret1, _ := ret[1].(*ledger.BlockJournal)
	return ret0, ret1
}

// FlushDirtyDataAndComputeJournal indicates an expected call of FlushDirtyDataAndComputeJournal.
func (mr *MockStateAccessorMockRecorder) FlushDirtyDataAndComputeJournal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDirtyDataAndComputeJournal", reflect.TypeOf((*MockStateAccessor)(nil).FlushDirtyDataAndComputeJournal))
}

// GetAccount mocks base method.
func (m *MockStateAccessor) GetAccount(arg0 *types.Address) *ledger.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*ledger.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStateAccessorMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStateAccessor)(nil).GetAccount), arg0)
}

// GetBalance mocks base method.
func (m *MockStateAccessor) GetBalance(arg0 *types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateAccessorMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateAccessor)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateAccessor) GetCode(arg0 *types.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateAccessorMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateAccessor)(nil).GetCode), arg0)
}

// GetNonce mocks base method.
func (m *MockStateAccessor) GetNonce(arg0 *types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateAccessorMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateAccessor)(nil).GetNonce), arg0)
}

// GetOrCreateAccount mocks base method.
func (m *MockStateAccessor) GetOrCreateAccount(arg0 *types.Address) *ledger.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", arg0)
	ret0, _ := ret[0].(*ledger.Account)
	return ret0
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount.
func (mr *MockStateAccessorMockRecorder) GetOrCreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockStateAccessor)(nil).GetOrCreateAccount), arg0)
}

// GetState mocks base method.
func (m *MockStateAccessor) GetState(arg0 *types.Address, arg1 []byte) (bool, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStateAccessorMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateAccessor)(nil).GetState), arg0, arg1)
}

// QueryByPrefix mocks base method.
func (m *MockStateAccessor) QueryByPrefix(address *types.Address, prefix string) (bool, [][]byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByPrefix", address, prefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([][]byte)
	return ret0, ret1
}

// QueryByPrefix indicates an expected call of QueryByPrefix.
func (mr *MockStateAccessorMockRecorder) QueryByPrefix(address, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByPrefix", reflect.TypeOf((*MockStateAccessor)(nil).QueryByPrefix), address, prefix)
}

// SetBalance mocks base method.
func (m *MockStateAccessor) SetBalance(arg0 *types.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockStateAccessorMockRecorder) SetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockStateAccessor)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockStateAccessor) SetCode(arg0 *types.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateAccessorMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateAccessor)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockStateAccessor) SetNonce(arg0 *types.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateAccessorMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateAccessor)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateAccessor) SetState(arg0 *types.Address, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateAccessorMockRecorder) SetState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateAccessor)(nil).SetState), arg0, arg1, arg2)
}

// Version mocks base method.
func (m *MockStateAccessor) Version() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockStateAccessorMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockStateAccessor)(nil).Version))
}

// MockBlockchainLedger is a mock of BlockchainLedger interface.
type MockBlockchainLedger struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainLedgerMockRecorder
}

// MockBlockchainLedgerMockRecorder is the mock recorder for MockBlockchainLedger.
type MockBlockchainLedgerMockRecorder struct {
	mock *MockBlockchainLedger
}

// NewMockBlockchainLedger creates a new mock instance.
func NewMockBlockchainLedger(ctrl *gomock.Controller) *MockBlockchainLedger {
	mock := &MockBlockchainLedger{ctrl: ctrl}
	mock.recorder = &MockBlockchainLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainLedger) EXPECT() *MockBlockchainLedgerMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *MockBlockchainLedger) GetBlock(height uint64) (*pb.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", height)
	ret0, _ := ret[0].(*pb.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockchainLedgerMockRecorder) GetBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockchainLedger)(nil).GetBlock), height)
}

// GetBlockByHash mocks base method.
func (m *MockBlockchainLedger) GetBlockByHash(hash *types.Hash) (*pb.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*pb.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockchainLedgerMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockchainLedger)(nil).GetBlockByHash), hash)
}

// GetBlockSign mocks base method.
func (m *MockBlockchainLedger) GetBlockSign(height uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSign", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSign indicates an expected call of GetBlockSign.
func (mr *MockBlockchainLedgerMockRecorder) GetBlockSign(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSign", reflect.TypeOf((*MockBlockchainLedger)(nil).GetBlockSign), height)
}

// GetChainMeta mocks base method.
func (m *MockBlockchainLedger) GetChainMeta() *pb.ChainMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainMeta")
	ret0, _ := ret[0].(*pb.ChainMeta)
	return ret0
}

// GetChainMeta indicates an expected call of GetChainMeta.
func (mr *MockBlockchainLedgerMockRecorder) GetChainMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainMeta", reflect.TypeOf((*MockBlockchainLedger)(nil).GetChainMeta))
}

// GetInterchainMeta mocks base method.
func (m *MockBlockchainLedger) GetInterchainMeta(height uint64) (*pb.InterchainMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterchainMeta", height)
	ret0, _ := ret[0].(*pb.InterchainMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterchainMeta indicates an expected call of GetInterchainMeta.
func (mr *MockBlockchainLedgerMockRecorder) GetInterchainMeta(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterchainMeta", reflect.TypeOf((*MockBlockchainLedger)(nil).GetInterchainMeta), height)
}

// GetReceipt mocks base method.
func (m *MockBlockchainLedger) GetReceipt(hash *types.Hash) (*pb.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", hash)
	ret0, _ := ret[0].(*pb.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockBlockchainLedgerMockRecorder) GetReceipt(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockBlockchainLedger)(nil).GetReceipt), hash)
}

// GetTransaction mocks base method.
func (m *MockBlockchainLedger) GetTransaction(hash *types.Hash) (*pb.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(*pb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBlockchainLedgerMockRecorder) GetTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBlockchainLedger)(nil).GetTransaction), hash)
}

// GetTransactionCount mocks base method.
func (m *MockBlockchainLedger) GetTransactionCount(height uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockBlockchainLedgerMockRecorder) GetTransactionCount(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockBlockchainLedger)(nil).GetTransactionCount), height)
}

// GetTransactionMeta mocks base method.
func (m *MockBlockchainLedger) GetTransactionMeta(hash *types.Hash) (*pb.TransactionMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionMeta", hash)
	ret0, _ := ret[0].(*pb.TransactionMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionMeta indicates an expected call of GetTransactionMeta.
func (mr *MockBlockchainLedgerMockRecorder) GetTransactionMeta(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionMeta", reflect.TypeOf((*MockBlockchainLedger)(nil).GetTransactionMeta), hash)
}

// PersistExecutionResult mocks base method.
func (m *MockBlockchainLedger) PersistExecutionResult(block *pb.Block, receipts []*pb.Receipt, meta *pb.InterchainMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistExecutionResult", block, receipts, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistExecutionResult indicates an expected call of PersistExecutionResult.
func (mr *MockBlockchainLedgerMockRecorder) PersistExecutionResult(block, receipts, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistExecutionResult", reflect.TypeOf((*MockBlockchainLedger)(nil).PersistExecutionResult), block, receipts, meta)
}

// PutBlock mocks base method.
func (m *MockBlockchainLedger) PutBlock(height uint64, block *pb.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlock", height, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlock indicates an expected call of PutBlock.
func (mr *MockBlockchainLedgerMockRecorder) PutBlock(height, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlock", reflect.TypeOf((*MockBlockchainLedger)(nil).PutBlock), height, block)
}

// UpdateChainMeta mocks base method.
func (m *MockBlockchainLedger) UpdateChainMeta(arg0 *pb.ChainMeta) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateChainMeta", arg0)
}

// UpdateChainMeta indicates an expected call of UpdateChainMeta.
func (mr *MockBlockchainLedgerMockRecorder) UpdateChainMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainMeta", reflect.TypeOf((*MockBlockchainLedger)(nil).UpdateChainMeta), arg0)
}
